#include "player.h"
#include <stdio.h>
#include <time.h>
#include <unistd.h>

/* Vals array is from the paper A genetic algorithm to improve an Othello
 * program by Jean-Marc Alliot, Nicolas Durand
 * URL: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.1218&rep=rep1&type=pdf
 * */
    int vals[8][8] = { {500 , -150 , 30 , 10 , 10 , 30 , -150 , 500},
    {-150 , -250 , 0 , 0 , 0 , 0 , -250 , -150},
    {30 , 0 , 1 , 2 , 2 , 1 , 0 , 30},
    {10 , 0 , 2 , 16 , 16 , 2 , 0 , 10},
    {10 , 0 , 2 , 16 , 16 , 2 , 0 , 10},
    {30 , 0 , 1 , 2 , 2 , 1 , 0 , 30},
    {-150 , -250 , 0 , 0 , 0 , 0 , -250 , -150},
    {500 , -150 , 30 , 10 , 10 , 30 , -150 , 500} };

/*
 * Constructor for the player; initialize everything here. The side your AI is
 * on (BLACK or WHITE) is passed in as "side". The constructor must finish
 * within 30 seconds.
 */
Player::Player(Side side) {
    // Will be set to true in test_minimax.cpp.
    testingMinimax = false;
    p_side = side;
    if (side == WHITE)
        o_side = BLACK;
    else
        o_side = WHITE;
    board = new Board();
}

/*
 * Destructor for the player.
 */
Player::~Player() {
}
int Player::score(Board * b)
{
    int sum = 0;
    for(int i = 0; i < 8; i++)
    {
        for(int j = 0; j < 8; j++)
        {
            if(b->occupied(i, j))
            {
                if(b->get(p_side, i, j))
                    sum += vals[i][j];
                else
                    sum -= vals[i][j];
            }
        }
    }
    return sum;
}

int Player::score(Board * b, Side side)
{
    int sum = 0;
    for(int i = 0; i < 8; i++)
    {
        for(int j = 0; j < 8; j++)
        {
            if(b->occupied(i, j))
            {
                if(b->get(p_side, i, j))
                    sum += vals[i][j];
                else
                    sum -= vals[i][j];
            }
        }
    }
    return sum;
}

Move * Player::AIMove(Move * opponentsMove, int msLeft)
{
    board->doMove(opponentsMove, o_side);
    int val = this->score(board);
    int score  = -1000000;
    int s = 0;
    int final_i = -1;
    int final_j = -1;
    int count = board->count();
    for(int i = 0; i < 8; i++)
    {
        for(int j = 0; j < 8; j++)
        {
            vals[i][j]++;
            Move *m =  new Move(i,j);
            if(board->checkMove(m, p_side))
            {
                Board *temp = board->copy();
                temp->doMove(m, p_side);

                s = -this->doAIMove(temp, o_side, 4, val, val);
                if (s > score)
                {
                    score = s;
                    final_i = i;
                    final_j = j;
                }
                delete temp;
            }
            delete m;
        }
    }
    if(score == -1000000)
    {
        return NULL;
    }
    Move *m = new Move(final_i, final_j);
    board->doMove(m, p_side);
    return m;
}
int Player::doAIMove(Board *b, Side pside, int depth, int val, int val4)
{
    Side oside = BLACK;
    if(pside == BLACK)
        oside = WHITE;
    if(depth == 4)
        {
            int curScore = this->score(b);
            if(curScore - val < -20000 || curScore - val4 < -20000)
                return curScore;
            val4 = curScore;
	        int score  = -100000;
            int s = 0;
            for(int i = 0; i < 8; i++)
            {
                for(int j = 0; j < 8; j++)
                {
                    Move *m =  new Move(i,j);
                    if(b->checkMove(m, pside))
                    {
                        Board *b1 = b->copy();
                        b1->doMove(m, pside);
		                int score1  = -100000;
                        int s1 = 0;
                        for(int i1 = 0; i1 < 8; i1++)
                        {
                            for(int j1 = 0; j1 < 8; j1++)
                            {
                                Move *m1 =  new Move(i1, j1);
                                if(b1->checkMove(m1, oside))
                                {
                                    Board *b2 = b1->copy();
                                    b2->doMove(m1, oside);
		                            int score2  = -100000;
                                    int s2 = 0;
                                    for(int i2 = 0; i2 < 8; i2++)
                                    {
                                        for(int j2 = 0; j2 < 8; j2++)
                                        {
                                            Move *m2 =  new Move(i2, j2);
                                            if(b2->checkMove(m2, pside))
                                            {
                                                Board *b3 = b2->copy();
                                                b3->doMove(m2, pside);
		                                        int score3  = -100000;
                                                int s3 = 0;
                                                for(int i3 = 0; i3 < 8; i3++)
                                                {
                                                    for(int j3 = 0; j3 < 8; j3++)
                                                    {
                                                        Move *m3 =  new Move(i3, j3);
                                                        if(b3->checkMove(m3, oside))
                                                        {
                                                            Board *b4 = b3->copy();
                                                            b4->doMove(m3, oside);
                                                            s3 = this->score(b4, oside);
                                                            if (s3 > score3)
                                                            {
                                                                score3 = s3;
                                                            }
                                                            delete b4;
                                                        }
                                                    delete m3;
                                                    }
                                                }
                                                s2 = -score3;
                                                if (s2 > score2)
                                                {
                                                    score2 = s2;
                                                }
                                                delete b3;
                                            }
                                            delete m2;
                                        }
                                    }
                                    s1 = -score2;
                                    if (s1 > score1)
                                    {
                                         score1 = s1;
                                    }
                                    delete b2;
                                }
                                delete m1;
                            }
                        }
                        s = -score1;
                        if (s > score)
                        {
                            score = s;
                        }
                        delete b1;
                }
                delete m;
            }
        }
        return score;
    }
}
Move *Player::doMoveHeuristic(Move *opponentsMove, int msLeft)
{
    board->doMove(opponentsMove, o_side);
    int score  = -100000;
    int s = 0;
    int final_i = -1;
    int final_j = -1;
    for(int i = 0; i < 8; i++)
    {
        for(int j = 0; j < 8; j++)
        {
            Move *m =  new Move(i,j);
            if(board->checkMove(m, p_side))
            {
                Board *temp = board->copy();
                temp->doMove(m, p_side);
                s = this->score(temp);
                if (s > score)
                {
                    score = s;
                    final_i = i;
                    final_j = j;
                }
                delete temp;
            }
            delete m;
        }
    }
    if(score == -100000)
    {
        return NULL;
    }
    Move *m = new Move(final_i, final_j);
    board->doMove(m, p_side);
    return m;
}

/*
 * Compute the next move given the opponent's last move. Your AI is
 * expected to keep track of the board on its own. If this is the first move,
 * or if the opponent passed on the last move, then opponentsMove will be NULL.
 *
 * msLeft represents the time your AI has left for the total game, in
 * milliseconds. doMove() must take no longer than msLeft, or your AI will
 * be disqualified! An msLeft value of -1 indicates no time limit.
 *
 * The move returned must be legal; if there are no valid moves for your side,
 * return NULL.
 */
Move *Player::doMove(Move *opponentsMove, int msLeft) {
    if(true)
    {
        return minMaxMove(opponentsMove, msLeft);
    }
    board->doMove(opponentsMove, o_side);

    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            Move *p_move = new Move(i, j);
            if (board->checkMove(p_move, p_side))
            {
                board->doMove(p_move, p_side);
                return p_move;
            }
            delete p_move;
        }
    }
    return NULL;
}
